/***************************************************************************
 *   Copyright (C) 2015 by root   				   						   *
 *   ysgen0217@163.com   							   					   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
#include "database.h"
#include "sqloperation.h"
#include "sqldelaythread.h"
#include "../../../library/util/log.h"
#include "../../../library/concurrent/thread.h"

using namespace library;
using namespace corelib;
using namespace corelib::database;

SqlDelayThtread::SqlDelayThtread(Database *db) : m_running(true), m_dbEngine(db)
{
}

SqlDelayThtread::~SqlDelayThtread()
{
	SqlOperation* s = NULL;
	while (!m_sqlQueue.empty())
	{
		s = m_sqlQueue.next();
		if (s != NULL) delete s;
		s = NULL;
	}
}

void SqlDelayThtread::run()
{
	if (m_dbEngine == NULL) {
		Log(LOG_ERROR, "SqlDelayThtread::run - dbEngine null.");
		return;
	}

	m_dbEngine->threadStart();

	SqlOperation* s = NULL;
	while (m_running)
	{
		// if the running state gets turned off while sleeping
        // empty the queue before exiting
        if (m_sqlQueue.empty())
			Thread::sleep(10);
		
		while (!m_sqlQueue.empty())
		{
			s = m_sqlQueue.next();
			if (s != NULL) {
				s->Execute(m_dbEngine);
				delete s;
			}
			s = NULL;
		}
	}

	m_dbEngine->threadEnd();
}

void SqlDelayThtread::stop()
{
	m_running = false;
}